schema:
  schema_id: rome
  name: 若木音
  version: "2025.05"
  dependencies:
    - radical_pinyin
    - melt_eng

menu:
  # 候选词个数
  page_size: 6

switches:
  - name: ascii_mode
    states: ["中", "En"]
    reset: 0
  - name: ascii_punct
    states: ["句读", "punct"]
    reset: 1
  - name: tranditionals
    states: ["简", "繁"]
    reset: 0
  - name: emoji
    states: ["❌", "✅"]
    reset: 1
  - name: full_shape
    states: ["弦", "盈"]
    reset: 0

# 引擎中的各个配置项要与后文的配置名一致.
# 例如 table_translator@cn_en 要求后文存在 cn_en 的配置项.
# lua_filter@*corrector_filter 要求后文存在 corrector_filter 的配置项,
# 且在 lua 文件夹中要存在 corrector_filter.lua 文件.
# 在这个 lua 文件中, 传入的 Rime 环境参数 env 中的 env.name_space 项的值为配置字段名,
# 此处为 corrector_filter
engine:
  processors:
    - lua_processor@*select_character
    - ascii_composer # ※ 處理西文模式及中西文切換
    - recognizer # ※ 與 matcher 搭配，處理符合特定規則的輸入碼，如網址、反查等
    - key_binder # ※ 在特定條件下將按鍵綁定到其他按鍵，如重定義逗號、句號爲候選翻頁鍵
    - speller
    - punctuator
    - selector
    - navigator
    - express_editor
  segmentors:
    - ascii_segmentor # 標識西文段落
    - matcher # 標識符合特定規則的段落，如網址、反查等
    - affix_segmentor@radical_reverse_lookup
    - abc_segmentor # 標識常規的文字段落
    - punct_segmentor # 標識句讀段落
    - fallback_segmentor # 標識其他未標識段落
  translators:
    - punct_translator # ※ 轉換標點符號
    - script_translator
    - lua_translator@*mint_date_time_translator # 时间、日期、星期、月份
    - lua_translator@*number_translator # 金额大小写
    - lua_translator@*chineseLunarCalendar_translator # 农历
    - lua_translator@*mint_calculator_translator # 计算器（lua 动态表达式）
    - table_translator@melt_eng # 中文模式下的英文输入
    - table_translator@cn_en # 中英混合词汇
    - reverse_lookup_translator@radical_reverse_lookup
    # - lua_translator@*force_gc
    - echo_translator # ※ 没有候选词，返回字符
  filters:
    - lua_filter@*corrector_filter # 错音错字提示
    - lua_filter@*autocap_filter # 英文自动大写
    - simplifier@emoji # 启用 emoji
    - simplifier@tranditionals # 繁简切换
    - lua_filter@*demote_english_words # 降低部分英语单词在候选项的位置
    - uniquifier # 去重

# 简繁切换
tranditionals:
  option_name: tranditionals
  opencc_config: s2t.json # s2t.json | s2hk.json | s2tw.json | s2twp.json
  tips: all # 转换提示: all 都显示 | char 仅单字显示 | none 不显示。
  excluded_types: [reverse_lookup] # 不转换反查（两分拼字）的内容

# emoji 配置
emoji:
  opencc_config: emoji.json
  option_name: emoji
  tips: all
  inherit_comment: false

# Lua 配置: 降低部分英语单词在候选项的位置。
# 详细介绍 https://dvel.me/posts/make-rime-en-better/#短单词置顶的问题
# 正常情况： 输入 rug 得到 「1.rug 2.如果 …… 」
# 降低之后： 输入 rug 得到 「1.如果 2.rug …… 」
# 几种模式：
# all     使用 demote_english_words 自带的降频词库（降低所有 3~4 位长度、前 2~3 位是完整拼音、最后一位是声母的单词）
# none    不降低任何单词，相当于没有启用这个 Lua
# custom  自定义，只降低 words 里的
# 『留白』 不设置该选项，使用 demote_english_words 内全局设置内容
# （匹配的是编码，不是单词）
demote_english_words:
  mode: # all | none | custom | 『留白』
  idx: 2 # 降低到第 idx 个位置
  # 自定义的单词列表，示例列表没有降低部分常用单词，如 and cat mail Mac but bad shit ……
  words:

# 错音错字提示
corrector_filter:
  # 当文字没有触发错字错音的情况下，保持原本的注释
  keep_source_comment: false
  # 注释格式, {comment} 为占位符
  style: "[{comment}]"

melt_eng:
  dictionary: melt_eng # 英文词典
  enable_sentence: false # 关闭自动造句
  enable_completion: false # 关闭自动提示
  initial_quality: 1.0
  comment_format: # 自定义提示码
    - xform/.*// # 清空提示码

cn_en:
  dictionary: "" # 中英混输, 直接使用短语词典，普通字典直接留空即可
  user_dict: dicts/rime_ice.cn_en
  db_class: stabledb
  enable_completion: false
  enable_sentence: false
  initial_quality: 0.5
  comment_format:
    - xform/^.+$//

# table_translator 的默认配置项
translator:
  # enable_correction: true # Rime自带的按键纠错, 适用于手机26键, 会影响选单中候选项的排序, 电脑上不建议开启. 参考: https://github.com/rime/librime/pull/228
  # 字典文件
  dictionary: rome # 使用的字典文件
  enable_word_completion: true # 大于 4 音节的词条自动补全, librime > 1.11.2
  spelling_hints: 8 # corrector_filter: 为了让错音错字提示的 Lua 同时适配全拼双拼, 将拼音显示在 comment 中
  always_show_comments: true # 始终显示 comment, 用于 corrector_filter 判断
  comment_format: # 标记拼音注释, 用于 corrector_filter 判断
    - xform/^/［/
    - xform/$/］/
  preedit_format:
    - xform/([nl])v/$1ü/
    - xform/([nl])ue/$1üe/
    - xform/([jqxy])v/$1u/
  initial_quality: 1.2
  enable_user_dict: true # 开启用户词典，根据用户输入调频（默认开启，此处再次声明）

speller:
  # 如果不想让什么标点直接上屏，可以加在 alphabet，或者编辑标点符号为两个及以上的映射；默认没用大写字母，使用大写字母方便中英混熟词典生效
  alphabet: zyxwvutsrqponmlkjihgfedcbaZYXWVUTSRQPONMLKJIHGFEDCBA

  # 第一位 「空格」是拼音之间的默认分隔符；第二位「`」表示可以手动输入单引号来分割拼音
  delimiter: " `"

  # 拼写匹配
  algebra:
    - erase/^xx$/ # 首选保留
    - derive/([aeiou])ng$/$1gn/ # dagn => dang
    - derive/([dtngkhrzcs])o(u|ng)$/$1o/ # zho => zhong|zhou
    - derive/ong$/on/ # zhonguo => zhong guo
    - derive/un$/ong/ # yuntong = yongtong
    ## 简拼
    - derive/^([a-z]).+$/$1/ # 通过正则表达式提取每个拼音的首字母
    - derive/^([zcs]h).+$/$1/ # 特别处理 zh, ch, sh 的首字母简写
    - abbrev/^([a-z]).+$/$1/ # 允许使用首字母作为缩写
    # 简拼: 允许使用前两个字母作为缩写
    - abbrev/^([a-z]{2,}).+$/$1/ # zem -> zen me -> 怎么
    ### 自动纠错
    # 有些规则对全拼简拼混输有副作用：如「x'ai 喜爱」被纠错为「xia 下」
    # zh、ch、sh
    - derive/([zcs])h(a|e|i|u|ai|ei|an|en|ou|uo|ua|un|ui|uan|uai|uang|ang|eng|ong)$/h$1$2/ # hzi → zhi
    - derive/([zcs])h([aeiu])$/$1$2h/ # zih → zhi
    # ai
    - derive/^([wghk])ai$/$1ia/ # wia → wai
    # ia
    - derive/([qjx])ia$/$1ai/ # qai → qia
    # ei
    - derive/([wtfghkz])ei$/$1ie/
    # ie
    - derive/([jqx])ie$/$1ei/
    # ao
    - derive/([rtypsdghklzcbnm])ao$/$1oa/
    # ou
    - derive/([ypfm])ou$/$1uo/
    # uo（无）
    # an
    - derive/([wrtypsdfghklzcbnm])an$/$1na/
    # en
    - derive/([wrpsdfghklzcbnm])en$/$1ne/
    # ang
    - derive/([wrtypsdfghklzcbnm])ang$/$1nag/
    - derive/([wrtypsdfghklzcbnm])ang$/$1agn/
    # eng
    - derive/([wrtpsdfghklzcbnm])eng$/$1neg/
    - derive/([wrtpsdfghklzcbnm])eng$/$1egn/
    # ing
    - derive/([qtypdjlxbnm])ing$/$1nig/
    - derive/([qtypdjlxbnm])ing$/$1ign/
    # ong
    - derive/([rtysdghklzcn])ong$/$1nog/
    - derive/([rtysdghklzcn])ong$/$1ogn/
    # iao
    - derive/([qtpdjlxbnm])iao$/$1ioa/
    - derive/([qtpdjlxbnm])iao$/$1oia/
    # ui
    - derive/([rtsghkzc])ui$/$1iu/
    # iu
    - derive/([qjlxnm])iu$/$1ui/
    # ian
    - derive/([qtpdjlxbnm])ian$/$1ain/
    # - derive/([qtpdjlxbnm])ian$/$1ina/ # 和「李娜、蒂娜、缉拿」等常用词有冲突
    # in
    - derive/([qypjlxbnm])in$/$1ni/
    # iang
    - derive/([qjlxn])iang$/$1aing/
    - derive/([qjlxn])iang$/$1inag/
    # ua
    - derive/([g|k|h|zh|sh])ua$/$1au/
    # uai
    - derive/([g|h|k|zh|ch|sh])uai$/$1aui/
    - derive/([g|h|k|zh|ch|sh])uai$/$1uia/
    # uan
    - derive/([qrtysdghjklzxcn])uan$/$1aun/
    # - derive/([qrtysdghjklzxcn])uan$/$1una/ # 和「去哪、露娜」等常用词有冲突
    # un
    - derive/([qrtysdghjklzxc])un$/$1nu/
    # ue
    - derive/([nlyjqx])ue$/$1eu/
    # üe
    - derive/([nl])ve/$1ue/
    # uang
    - derive/([g|h|k|zh|ch|sh])uang$/$1aung/
    - derive/([g|h|k|zh|ch|sh])uang$/$1uagn/
    - derive/([g|h|k|zh|ch|sh])uang$/$1unag/
    - derive/([g|h|k|zh|ch|sh])uang$/$1augn/
    # iong
    - derive/([jqx])iong$/$1inog/
    - derive/([jqx])iong$/$1oing/
    - derive/([jqx])iong$/$1iogn/
    - derive/([jqx])iong$/$1oign/
    # 其他
    - derive/([rtsdghkzc])o(u|ng)$/$1o/ # do → dou|dong
    - derive/ong$/on/ # lon → long
    - derive/([tl])eng$/$1en/ # ten → teng
    - derive/([qwrtypsdfghjklzxcbnm])([aeio])ng$/$1ng/ # lng → lang、leng、ling、long
    - derive/un$/ong/ # yuntong = yongtong

radical_reverse_lookup:
  tag: radical_lookup
  dictionary: radical_pinyin
  enable_completion: false
  enable_sentence: false
  prefix:
    "Uu"
    # comment_format:
  #   - erase/^.*$// # 删除注释
  tips: 〔拆字〕

reverse_lookup:
  tags: [radical_lookup]
  overwrite_comment: true
  dictionary: dicts/rime_ice.8105

# 处理符号按键
punctuator:
  import_preset: symbols

# 反查映射
recognizer:
  import_preset: default
  patterns:
    url: "^[a-z]+[.].+$"
    punct: "^/([0-9]0?|[a-zA-Z]+)$"
    radical_lookup: "Uu[a-z]*'?$"
    rmb: "^R[0-9]+[.]?[0-9]*" # 响应 lua_translator@number_translator 脚本将自动获取第 2 个字符作为触发前缀
    expression: "^=.*$" # 响应 lua_translator@expression_translator 脚本将自动获取第 2 个字符作为触发前缀
    lunar_cmd: "lunar" # 触发当前农历日期的关键词
    gregorian_to_lunar: "^N[0-9]{1,8}" # 响应 lua_translator@Chinese_lunar_calendar 公历转农历，输入 N20240115 得到「二〇二四年腊月初五」，脚本将自动获取第 2 个字符作为触发前缀
    uppercase: "" # 覆写默认的 uppercase 使其可以在输入大写后，输入数字

key_binder:
  # import_preset: default
  # 以词定字键位, 默认开启
  # select_first_character: bracketleft # [
  # select_last_character: bracketright # ]
  bindings:
    # has_menu: 有候选字即可
    # paging: 已经至少翻过一页时
    # composing: 打字输入时
    - { when: always, accept: "Control+Shift+E", toggle: emoji } # toggle 值要和前文 switches 中配置的一致
    - { when: always, accept: Control+Shift+1, select: .next } # 选择输入法列表中的下一项
    - { when: always, accept: Control+Shift+2, toggle: ascii_mode } # 切换中英文输入
    - { when: always, accept: Control+Shift+3, toggle: full_shape } # 全半角
    - { when: always, accept: Shift+space, toggle: full_shape }
    - { when: always, accept: Control+Shift+4, toggle: tranditionals } # 简繁体
    - { when: always, accept: Control+Shift+5, toggle: extended_charset } # 扩展词表
    - { when: always, accept: Control+period, toggle: ascii_punct }
    - { when: has_menu, accept: "Control+Shift+T", toggle: tranditionals }
    - { when: paging, accept: minus, send: Page_Up } # - 用于向前翻页
    - { when: paging, accept: comma, send: Page_Up } # , 用于向前翻页
    - { when: has_menu, accept: equal, send: Page_Down } # = 用于向后翻页
    - { when: has_menu, accept: period, send: Page_Down } # . 用于向后翻页
    - { when: predicting, accept: comma, send: comma }
    - { when: predicting, accept: period, send: period }
